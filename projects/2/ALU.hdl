// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, pcomutes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:

    // Begin processing the zx and nx bits for x
    Mux16 (a=x[0..15], b[0..15]=false, sel=zx, out=xOne);
    Not16 (in=xOne, out=xNot);
    Mux16 (a=xOne, b=xNot, sel=nx, out=xProcessed);

    // Begin processing zy and ny bits for y
    Mux16 (a=y[0..15], b[0..15]=false, sel=zy, out=yOne);
    Not16 (in=yOne, out=yNot);
    Mux16 (a=yOne, b=yNot, sel=ny, out=yProcessed);

    // Implement the bitwise AND and additon of x and y after their processing
    And16 (a=xProcessed, b=yProcessed, out=xyAnd);
    Add16 (a=xProcessed, b=yProcessed, out=xyAdd);

    // Use Mux gate to assign the output using f
    Mux16 (a=xyAnd, b=xyAdd, sel=f, out=fout);

    // if (no == 1) negate the output
    Not16 (in=fout, out=fNot);

    // Use Mux gate to assign the output using no
    // if (out < 0) ng = 1, else ng = 0
    Mux16 (a=fout, b=fNot, sel=no, out=out, out[15]=ng, out[0..7]=positiveSignedBits, out[8..15]=negativeSignedBits);

    // Assign appropriate value to zr using the value of out
    Or8Way (in=positiveSignedBits, out=or1);
    Or8Way (in=negativeSignedBits, out=or2);
    Or (a=or1, b=or2, out=orOut);
    Not (in=orOut, out=zr);

}